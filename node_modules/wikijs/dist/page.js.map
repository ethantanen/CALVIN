{"version":3,"sources":["../src/page.js"],"names":["wikiPage","getFileName","text","indexOf","split","name","apiOptions","generator","gimlimit","prop","iiprop","titles","raw","title","then","res","query","Object","keys","pages","map","id","rvprop","rvsection","pageid","revisions","rawInfo","wikitext","parser","general","key","metadata","hasOwnProperty","rawPageInfo","html","rvlimit","rvparse","content","explaintext","extract","summary","exintro","images","rawImages","image","imageinfo","reduce","imageInfos","list","info","url","references","ellimit","extlinks","link","links","plnamespace","pllimit","limit","aggregated","_pagination","categories","category","coordinates","page","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","badge","logo","mainImageName","length","sort","b","a","find","filename","replace","langlinks","lllimit","lang","fullInfo"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api } from './util';\nimport infoboxParser from 'infobox-parser';\nimport {parseCoordinates} from './coordinates';\n\nconst getFileName = text => {\n\tif (!text) return undefined;\n\tif (text.indexOf(':') !== -1) {\n\t\tconst [, name] = text.split(':');\n\t\treturn name;\n\t}\n\treturn text;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n\tconst raw = rawPageInfo;\n\n\t/**\n\t * HTML from page\n\t * @example\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\n\t * @method WikiPage#html\n\t * @return {Promise}\n\t */\n\tfunction html() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'revisions',\n\t\t\t\trvprop: 'content',\n\t\t\t\trvlimit: 1,\n\t\t\t\trvparse: '',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * Text content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\n\t * @method WikiPage#content\n\t * @return {Promise}\n\t */\n\tfunction content() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'extracts',\n\t\t\t\texplaintext: '',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Text summary from page\n\t * @example\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\n\t * @method WikiPage#summary\n\t * @return {Promise}\n\t */\n\tfunction summary() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'extracts',\n\t\t\t\texplaintext: '',\n\t\t\t\texintro: '',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Raw data from images from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n\t * @method WikiPage#rawImages\n\t * @return {Promise}\n\t */\n\tfunction rawImages() {\n\t\treturn api(apiOptions, {\n\t\t\t\tgenerator: 'images',\n\t\t\t\tgimlimit: 'max',\n\t\t\t\tprop: 'imageinfo',\n\t\t\t\tiiprop: 'url',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tif (res.query) {\n\t\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t});\n\t}\n\n\t/**\n\t * Main image URL from infobox on page\n\t * @example\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n\t * @method WikiPage#mainImage\n\t * @return {Promise}\n\t */\n\tfunction mainImage() {\n\t\treturn Promise.all([rawImages(), info()])\n\t\t\t.then(([images, info]) => {\n\t\t\t\t// Handle different translations of \"image\" here\n\t\t\t\tconst mainImageName = getFileName(\n\t\t\t\t\tinfo.image ||\n\t\t\t\t\tinfo.bildname ||\n\t\t\t\t\tinfo.imagen ||\n\t\t\t\t\tinfo.Immagine ||\n\t\t\t\t\tinfo.badge ||\n\t\t\t\t\tinfo.logo\n\t\t\t\t);\n\t\t\t\t// Handle case where no info box exists\n\t\t\t\tif (!mainImageName) {\n\t\t\t\t\treturn rawInfo().then(text => {\n\t\t\t\t\t\tif (!images.length) return undefined;\n\t\t\t\t\t\t// Sort images by what is seen first in page's info text\n\t\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n\t\t\t\t\t\tconst image = images[0];\n\t\t\t\t\t\treturn image.imageinfo.length > 0\n\t\t\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tconst image = images.find(({ title }) => {\n\t\t\t\t\tconst filename = getFileName(title);\n\t\t\t\t\t// Some wikis use underscores for spaces, some don't\n\t\t\t\t\treturn filename === mainImageName ||\n\t\t\t\t\t\tfilename.replace(/\\s/g, '_') === mainImageName;\n\t\t\t\t});\n\t\t\t\treturn image && image.imageinfo.length > 0\n\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t: undefined;\n\t\t\t});\n\t}\n\n\t/**\n\t * Image URL's from page\n\t * @example\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\n\t * @method WikiPage#images\n\t * @return {Promise}\n\t */\n\tfunction images() {\n\t\treturn rawImages()\n\t\t\t.then(images => {\n\t\t\t\treturn images\n\t\t\t\t\t.map(image => image.imageinfo)\n\t\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\n\t\t\t\t\t.map(info => info.url);\n\t\t\t});\n\t}\n\n\t/**\n\t * References from page\n\t * @example\n\t * wiki.page('batman').then(page => page.references()).then(console.log);\n\t * @method WikiPage#references\n\t * @return {Promise}\n\t */\n\tfunction references() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'extlinks',\n\t\t\t\tellimit: 'max',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].extlinks.map(link => link['*']));\n\t}\n\n\t/**\n\t * Paginated links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.links()).then(console.log);\n\t * @method WikiPage#links\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\n\t * @param  {Number} [limit] - number of links per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction links(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(apiOptions, {\n\t\t\tprop: 'links',\n\t\t\tplnamespace: 0,\n\t\t\tpllimit: limit,\n\t\t\ttitles: raw.title\n\t\t}, res => res.query.pages[raw.pageid].links.map(link => link.title));\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Paginated categories from page\n\t * @example\n\t * wiki.page('batman').then(page => page.categories()).then(console.log);\n\t * @method WikiPage#categories\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\n\t * @param  {Number} [limit] - number of categories per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction categories(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(apiOptions, {\n\t\t\tprop: 'categories',\n\t\t\tpllimit: limit,\n\t\t\ttitles: raw.title\n\t\t}, res => res.query.pages[raw.pageid].categories.map(category => category.title));\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Geographical coordinates from page\n\t * @example\n\t * wiki().page('Texas').then(texas => texas.coordinates())\n\t * @method WikiPage#coordinates\n\t * @return {Promise}\n\t */\n\tfunction coordinates() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'coordinates',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => {\n\t\t\t\tconst page = res.query.pages[raw.pageid];\n\t\t\t\tif (page.coordinates) {\n\t\t\t\t\treturn page.coordinates[0];\n\t\t\t\t}\n\t\t\t\t// No coordinates for this page, check infobox for deprecated version\n\t\t\t\treturn info().then(data => parseCoordinates(data));\n\t\t\t});\n\t}\n\t\n\tfunction rawInfo() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'revisions',\n\t\t\t\trvprop: 'content',\n\t\t\t\trvsection: 0,\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * Get general information from page, with optional specifc property\n\t * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.info('alter_ego'));\n\t * @method WikiPage#info\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n\t */\n\tfunction info(key) {\n\t\treturn rawInfo()\n\t\t\t.then(wikitext => {\n\t\t\t\t// Use general data for now...\n\t\t\t\treturn infoboxParser(wikitext, apiOptions.parser).general;\n\t\t\t})\n\t\t\t.then(metadata => {\n\t\t\t\tif (!key) {\n\t\t\t\t\treturn metadata;\n\t\t\t\t}\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\n\t\t\t\t\treturn metadata[key];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Get the full infobox data, parsed in a easy to use manner\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\n\t * @method WikiPage#fullInfo\n\t * @return {Promise} - Parsed object of all infobox data\n\t */\n\tfunction fullInfo() {\n\t\treturn rawInfo().then(wikitext => infoboxParser(wikitext, apiOptions.parser));\n\t}\n\n\t/**\n\t * Paginated backlinks from page\n\t * @method WikiPage#backlinks\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n\t * @param  {Number} [limit] - number of backlinks per page\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\n\t */\n\tfunction backlinks(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(apiOptions, {\n\t\t\tlist: 'backlinks',\n\t\t\tbllimit: limit,\n\t\t\tbltitle: raw.title\n\t\t}, res => res.query.backlinks.map(link => link.title));\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\t\n\t/**\n\t * Get list of links to different translations\n\t * @method WikiPage#langlinks\n\t * @return {Promise} - includes link objects { lang, title }\n\t */\n\tfunction langlinks() {\n\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'langlinks',\n\t\t\t\tlllimit: 'max',\n\t\t\t\ttitles: raw.title\n\t\t\t})\n\t\t\t.then(res => res.query.pages[raw.pageid].langlinks.map(link => {\n\t\t\t\treturn {\n\t\t\t\t\tlang: link.lang,\n\t\t\t\t\ttitle: link['*']\n\t\t\t\t}\n\t\t\t}));\n\t}\n\n\tconst page = {\n\t\traw,\n\t\thtml,\n\t\tcontent,\n\t\tsummary,\n\t\timages,\n\t\treferences,\n\t\tlinks,\n\t\tcategories,\n\t\tcoordinates,\n\t\tinfo,\n\t\tbacklinks,\n\t\trawImages,\n\t\tmainImage,\n\t\tlanglinks,\n\t\trawInfo,\n\t\tfullInfo\n\t};\n\n\treturn page;\n}\n"]}